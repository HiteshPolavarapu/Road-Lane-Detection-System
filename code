import cv2
import numpy as np
import glob
import os
from moviepy.editor import VideoFileClip
from IPython.display import HTML

# --- Perspective Transform ---
def perspective_warp(img, src, dst):
    h, w = img.shape[:2]
    M = cv2.getPerspectiveTransform(src, dst)
    warped = cv2.warpPerspective(img, M, (w, h), flags=cv2.INTER_LINEAR)
    return warped, M

def perspective_unwarp(img, M):
    h, w = img.shape[:2]
    Minv = np.linalg.inv(M)
    return cv2.warpPerspective(img, Minv, (w, h), flags=cv2.INTER_LINEAR)

# --- Sliding Window Lane Detection ---
def sliding_window(binary_warped):
    histogram = np.sum(binary_warped[binary_warped.shape[0]//2:,:], axis=0)
    midpoint = np.int32(histogram.shape[0]//2)
    leftx_base = np.argmax(histogram[:midpoint])
    rightx_base = np.argmax(histogram[midpoint:]) + midpoint

    nwindows = 9
    window_height = np.int32(binary_warped.shape[0]//nwindows)
    nonzero = binary_warped.nonzero()
    nonzeroy, nonzerox = np.array(nonzero[0]), np.array(nonzero[1])

    leftx_current, rightx_current = leftx_base, rightx_base
    margin, minpix = 100, 50

    left_lane_inds, right_lane_inds = [], []

    for window in range(nwindows):
        win_y_low = binary_warped.shape[0] - (window+1)*window_height
        win_y_high = binary_warped.shape[0] - window*window_height
        win_xleft_low, win_xleft_high = leftx_current - margin, leftx_current + margin
        win_xright_low, win_xright_high = rightx_current - margin, rightx_current + margin

        good_left_inds = ((nonzeroy >= win_y_low) & (nonzeroy < win_y_high) &
                          (nonzerox >= win_xleft_low) & (nonzerox < win_xleft_high)).nonzero()[0]
        good_right_inds = ((nonzeroy >= win_y_low) & (nonzeroy < win_y_high) &
                           (nonzerox >= win_xright_low) & (nonzerox < win_xright_high)).nonzero()[0]

        left_lane_inds.append(good_left_inds)
        right_lane_inds.append(good_right_inds)

        if len(good_left_inds) > minpix:
            leftx_current = np.int32(np.mean(nonzerox[good_left_inds]))
        if len(good_right_inds) > minpix:
            rightx_current = np.int32(np.mean(nonzerox[good_right_inds]))

    left_lane_inds = np.concatenate(left_lane_inds)
    right_lane_inds = np.concatenate(right_lane_inds)

    leftx, lefty = nonzerox[left_lane_inds], nonzeroy[left_lane_inds]
    rightx, righty = nonzerox[right_lane_inds], nonzeroy[right_lane_inds]

    # Defensive check
    if len(leftx) < 500 or len(rightx) < 500:
        return None, None

    left_fit = np.polyfit(lefty, leftx, 2)
    right_fit = np.polyfit(righty, rightx, 2)
    return left_fit, right_fit

# --- Draw Lane ---
def draw_lane(original_img, binary_warped, left_fit, right_fit, M):
    if left_fit is None or right_fit is None:
        return original_img

    h, w = binary_warped.shape[:2]
    ploty = np.linspace(0, h-1, h)
    left_fitx = left_fit[0]*ploty**2 + left_fit[1]*ploty + left_fit[2]
    right_fitx = right_fit[0]*ploty**2 + right_fit[1]*ploty + right_fit[2]

    warp_zero = np.zeros_like(binary_warped).astype(np.uint8)
    color_warp = np.dstack((warp_zero, warp_zero, warp_zero))

    pts_left = np.array([np.transpose(np.vstack([left_fitx, ploty]))])
    pts_right = np.array([np.flipud(np.transpose(np.vstack([right_fitx, ploty])))])
    pts = np.hstack((pts_left, pts_right))

    cv2.fillPoly(color_warp, np.int32([pts]), (0,255,0))
    newwarp = perspective_unwarp(color_warp, M)
    return cv2.addWeighted(original_img, 1, newwarp, 0.3, 0)

# --- Frame Processor ---
def process_frame(frame):
    h, w = frame.shape[:2]

    # Preprocessing
    gray = cv2.cvtColor(frame, cv2.COLOR_RGB2GRAY)
    blur = cv2.GaussianBlur(gray, (5,5), 0)
    edges = cv2.Canny(blur, 50, 150)

    # Perspective transform
    src = np.float32([[w*0.45, h*0.63],
                      [w*0.55, h*0.63],
                      [w*0.1, h],
                      [w*0.9, h]])
    dst = np.float32([[w*0.2, 0],
                      [w*0.8, 0],
                      [w*0.2, h],
                      [w*0.8, h]])
    warped, M = perspective_warp(edges, src, dst)

    left_fit, right_fit = sliding_window(warped)
    return draw_lane(frame, warped, left_fit, right_fit, M)

# --- Batch Video Processing ---
input_folder = "/content/drive/MyDrive/Colab Notebooks/LaneDetection/CarND-LaneLines-P1-master/test_videos/" # replace with your link
output_folder = "/content/drive/MyDrive/Colab Notebooks/LaneDetection/Results_lane_detection/" # replace with your link

os.makedirs(output_folder, exist_ok=True)
video_files = glob.glob(os.path.join(input_folder, "*.mp4"))

for video_input_path in video_files:
    filename = os.path.basename(video_input_path)
    video_output_path = os.path.join(output_folder, f"{os.path.splitext(filename)[0]}_birdseye.mp4")

    print(f"Processing {filename} → {video_output_path}")
    clip = VideoFileClip(video_input_path)
    processed_clip = clip.fl_image(process_frame)
    processed_clip.write_videofile(video_output_path, audio=False)

print("✅ All videos processed successfully!")
